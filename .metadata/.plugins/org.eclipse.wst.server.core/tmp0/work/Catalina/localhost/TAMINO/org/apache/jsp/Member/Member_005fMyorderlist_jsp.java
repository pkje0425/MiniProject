/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.42
 * Generated at: 2020-03-19 12:54:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.DecimalFormat;
import dto.MyOrderListDto;
import dto.OrderListDto;
import java.util.List;
import dto.MemberDto;

public final class Member_005fMyorderlist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.text.DecimalFormat");
    _jspx_imports_classes.add("dto.MyOrderListDto");
    _jspx_imports_classes.add("dto.MemberDto");
    _jspx_imports_classes.add("dto.OrderListDto");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

MemberDto logindto = (MemberDto)session.getAttribute("login");
	String currId = "guest";
	if( request.getSession().getAttribute("login") != null ){
		MemberDto loginDto = (MemberDto)request.getSession().getAttribute("login");
		currId = loginDto.getEmail();
	}


      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.4.1.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/TAMINO/Member/css/MyPage.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/TAMINO/Store/css/MyPageOverlay.css\">\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css?family=Noto+Sans+KR|Roboto|Roboto+Mono|Viga&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("body{\r\n");
      out.write("font-family: 'Open Sans', sans-serif;\r\n");
      out.write("width:100%; \r\n");
      out.write("text-align:left;\r\n");
      out.write("background-size: 100%;\r\n");
      out.write("background-repeat: no-repeat;\r\n");
      out.write("}\r\n");
      out.write("#box1{\r\n");
      out.write("/* background-color:#FCFCFC; */\r\n");
      out.write("\t  width: 60%;\r\n");
      out.write("\t    height:auto;\r\n");
      out.write("\t   margin: 0 auto;\r\n");
      out.write("\t   margin-top: 200px;\r\n");
      out.write("\t   margin-bottom: 100px;\r\n");
      out.write("\t   padding-bottom: 200px;\r\n");
      out.write("/* \t border: solid 1px;\r\n");
      out.write("\t border-color: red; */\r\n");
      out.write("}\r\n");
      out.write("table {\r\n");
      out.write("\twidth: 80%;\r\n");
      out.write("    border-top: 1px solid #6C6C6C;\r\n");
      out.write("    border-collapse: collapse;\r\n");
      out.write("}\r\n");
      out.write("th, td {\r\n");
      out.write("    border-bottom: 1px solid #6C6C6C;\r\n");
      out.write("     padding: 10px; \r\n");
      out.write("}\r\n");
      out.write("#title1{\r\n");
      out.write("color: white;\r\n");
      out.write("background-color: #212121;\r\n");
      out.write("}\r\n");
      out.write(".title2{\r\n");
      out.write("background-color: #EAEAEA;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".item{\r\n");
      out.write("height: 150px;\r\n");
      out.write("width: 150px;\r\n");
      out.write("}\r\n");
      out.write(".box3{\r\n");
      out.write("margin-bottom: 40px;\r\n");
      out.write("}\r\n");
      out.write("#_Sbtn{\r\n");
      out.write("\tbackground-color: white;\r\n");
      out.write("}\r\n");
      out.write("#_Sbtn:hover{\r\n");
      out.write("\tbackground-color: black;\r\n");
      out.write("\tcolor: white;\r\n");
      out.write("\tcursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 네비게이션바 -->\r\n");
      out.write("<input type=\"hidden\" value=\"");
      out.print(currId );
      out.write("\" id=\"currId\"> \r\n");
      out.write("<div class=\"header\">\r\n");
      out.write("\t<div class=\"header-content\">\r\n");
      out.write("\t\t<a><img id=\"logoimg\" src=\"/TAMINO/image/taminoKLEIN.png\"></a> <!-- Main 링크 걸기 -->\r\n");
      out.write("\t\t<div class=\"menu\">\r\n");
      out.write("\t\t<a   href=\"/TAMINO/AdminCtrl?command=Main_Page\" id=\"main\">MAIN</a>\r\n");
      out.write("\t\t<a  href=\"/TAMINO/StoreCtrl?command=StoreMain\" id=\"store\">STORE</a>\r\n");
      out.write("\t\t<a id=\"mypage\" onclick=\"openNav()\">MY PAGE</a>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<div class=\"login\">\r\n");
      out.write("\t\t\t<a id=\"login\">LOGIN</a>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div id=\"box1\">\t<!-- 전체 div -->\r\n");
      out.write("\r\n");
      out.write("<h2 align=\"left\">나의 주문내역</h2>\r\n");
      out.write("\r\n");

List<MyOrderListDto> list = (List<MyOrderListDto>)request.getAttribute("orderlist");

      out.write('\r');
      out.write('\n');

	if(list.size()==0 || list ==null){
		
      out.write("\r\n");
      out.write("\t\t<div style=\"width: 40%; height: 30%; position: absolute; left: 30%; top:40%;\" align=\"center\"> \r\n");
      out.write("\t\t<h1>현재 구매내역이 없습니다!</h1>\r\n");
      out.write("\t\t<button type=\"button\" id=\"_Sbtn\" style=\"width: 400px; height: 100px; border: 3px solid black\" onclick=\"location.href='/TAMINO/StoreCtrl?command=StoreMain'\"><h1>Shoping Now</h1></button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t");

	}
	else{
		for(int i = 0;i < list.size(); i++){
			MyOrderListDto dto = list.get(i);
			//구매날짜
			String orderdate = dto.getOrder_date();
			orderdate = orderdate.substring(0, 8);
			//배송상황
			String delivery = dto.getDelivery_status();
			delivery = delivery.substring(0, 1);
			
			if(delivery.equals("1")){
				delivery = "배송중";
				
			}else if(delivery.equals("2")){
				delivery = "배송완료";
			}
			
      out.write("\r\n");
      out.write("\t\t\t<div align=\"center\" class=\"box3\">\r\n");
      out.write("\t\t\t<table>\r\n");
      out.write("\t\t\t<col width=\"150\"><col width=\"450\">\r\n");
      out.write("\t\t\t<tr id=\"title1\"><th>");
      out.print(orderdate );
      out.write("</th><th>");
      out.print(delivery );
      out.write("</th></tr>\r\n");
      out.write("\t\t\t");

			DecimalFormat df = new DecimalFormat("###,###");  //

			//사진
			String image = dto.getProduct_image();
			String[] images =image.split(",");
			//상품명
			String name = dto.getProduct_name();
			String[] names = name.split(",");
			//상품사이즈
			String size = dto.getProduct_size();
			String[] sizes = size.split(",");
			//상품가격
			String price = dto.getProduct_price();
			String[] prices = price.split(",");
			//상품개수
			String count = dto.getProduct_count();
			String[] counts = count.split(",");
			int k = 0;
			int sum = 0; //상품가격
			int countitem = 0; //상품갯수
			for(int j =0; j < names.length; j++){
				int kprice = Integer.parseInt(prices[j]);
				String _prices = df.format(kprice);
			
      out.write("\r\n");
      out.write("\t\t\t<tr><th rowspan=\"3\"><img src=\"/TAMINO/product/");
      out.print(images[j*k]);
      out.write("\" class=\"item\"></th><td>");
      out.print(names[j] );
      out.write("</td></tr>\r\n");
      out.write("\t\t\t<tr><td>[옵션]사이즈:");
      out.print(sizes[j] );
      out.write("</td></tr>\r\n");
      out.write("\t\t\t<tr><td>");
      out.print(_prices );
      out.write('원');
      out.write('/');
      out.write(' ');
      out.print(counts[j] );
      out.write("개</td></tr>\r\n");
      out.write("\t\t\t");

			k = 5;
			sum = sum + Integer.parseInt(prices[j])*Integer.parseInt(counts[j]);


			}
			int allsum = sum + 2500;

			String _sum = df.format(sum);
			String _allsum = df.format(allsum);
			
      out.write("\r\n");
      out.write("\t\t\t<tr class=\"title2\"><th>상품가격</th><td>");
      out.print(_sum );
      out.write("원</td></tr>\r\n");
      out.write("\t\t\t<tr class=\"title2\"><th>배송비</th><td>2,500원</td></tr>\r\n");
      out.write("\t\t\t<tr class=\"title2\"><th><h3>총 주문금액</h3></th><td><h3>");
      out.print(_allsum );
      out.write("원</h3></td></tr>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t");

		}
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</div> <!-- 전체 -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div id=\"myNav\" class=\"overlay\">\r\n");
      out.write("<a href=\"javascript:void(0)\" class=\"closebtn\" onclick=\"closeNav()\">&times;</a>\r\n");
      out.write("\t<div class=\"overlay-content\">\r\n");
      out.write("\t\t<p>MY PAGE</p>\r\n");
      out.write("    \t<a href=\"/TAMINO/MemberCtrl?command=myInfo&email=");
      out.print(currId );
      out.write("\">회원정보 수정</a>\r\n");
      out.write("    \t<a href=\"/TAMINO/MemberCtrl?command=MyOrderList\">주문내역</a>\r\n");
      out.write("  \t</div>\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("$(function () {\r\n");
      out.write("\tif($(\"#currId\").val() != \"guest\"){\r\n");
      out.write("\t\t//alert($(\"#login\").attr(\"href\"));\r\n");
      out.write("\t\t$(\"#login\").text(\"LOGOUT\");\r\n");
      out.write("\t\t$(\"#login\").attr(\"href\", \"/TAMINO/MemberCtrl?command=logout\");\r\n");
      out.write("\t\t$(\"#mypage\").css(\"display\", \"block\");\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#cart\").click(function() {\r\n");
      out.write("\t\tif($(\"#currId\").val() == \"guest\"){/* 로그인 하지 않은 경우 */\r\n");
      out.write("\t\t\talert(\"장바구니는 로그인 후 이용 가능합니다.\");\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//location.href = \"/TAMINO/StoreCtrl?command=login\";\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\t$(\"#cart\").attr(\"href\", \"/TAMINO/StoreCtrl?command=goCart\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("function openNav() {\r\n");
      out.write("  document.getElementById(\"myNav\").style.width = \"100%\";\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function closeNav() {\r\n");
      out.write("  document.getElementById(\"myNav\").style.width = \"0%\";\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
